#include <OneWire.h>
#include <DallasTemperature.h>
#include <WiFi.h>
#include <WebServer.h>
#include <U8g2lib.h>
#include <WiFiManager.h>
#include <EEPROM.h>
#include <HTTPClient.h>
#include <Update.h>

// EEPROM addresses for storing InfluxDB settings
#define EEPROM_SIZE 1024
#define INFLUXDB_SERVER_ADDR 0
#define INFLUXDB_DATABASE_ADDR 100
#define INFLUXDB_USER_ADDR 200
#define INFLUXDB_PASSWORD_ADDR 300
#define SENSOR_NAMES_ADDR 400
#define PASSWORD_ADDR 700

// Data wire is plugged into pin 4 on the ESP32
#define ONE_WIRE_BUS 4

// Setup a oneWire instance to communicate with any OneWire devices
OneWire oneWire(ONE_WIRE_BUS);

// Pass our oneWire reference to Dallas Temperature sensor
DallasTemperature sensors(&oneWire);

// Initialize the OLED display
U8G2_SSD1306_128X64_NONAME_F_SW_I2C u8g2(U8G2_R0, /* clock=*/ 22, /* data=*/ 21, /* reset=*/ U8X8_PIN_NONE);

// Create a web server on port 80
WebServer server(80);

// Store device addresses
DeviceAddress sensorAddresses[4];
int sensorCount = 0;

String ipAddress = "";

// InfluxDB settings
String influxdb_server;
String influxdb_database;
String influxdb_user;
String influxdb_password;

// Store sensor readings
float sensorReadings[4] = {NAN, NAN, NAN, NAN};

// Store sensor names
String sensorNames[4] = {"Sensor 1", "Sensor 2", "Sensor 3", "Sensor 4"};

// Function declarations
void handleRoot();
void handleData();
void handleWifiConfig();
void handleSaveWifi();
void handleInfluxDBConfig();
void handleSaveInfluxDB();
void handleSensorNamesConfig();
void handleSaveSensorNames();
void handleSystem();
void handleUpdateURL();
void handleUpdateUpload();
void handlePerformUpdate();
void handleReboot();
void handleDownloadEEPROM();
void handleUploadEEPROM();
void restartCountdown();
String getHtmlHeader();
String getMenu();
String getFooter();
String getSignalStrength();
void writeStringToEEPROM(int addrOffset, const String &strToWrite);
String readStringFromEEPROM(int addrOffset);
void printAddress(DeviceAddress deviceAddress);
void displayOLED();
String getUpdateStatus();
String getRAMUsage();
String getSpaceUsed();

void setup() {
  Serial.begin(115200);
  EEPROM.begin(EEPROM_SIZE);
  u8g2.begin();

  // Display initializing message with a loading bar
  for (int i = 0; i <= 100; i += 10) {
    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_ncenB08_tr);
    u8g2.drawStr(0, 24, "Initializing...");
    u8g2.drawBox(0, 30, (i * 128) / 100, 10);
    u8g2.sendBuffer();
    delay(100);
  }

  WiFiManager wifiManager;
  wifiManager.autoConnect("ESP32-Config");

  ipAddress = WiFi.localIP().toString();
  Serial.print("IP Address: ");
  Serial.println(ipAddress);

  influxdb_server = readStringFromEEPROM(INFLUXDB_SERVER_ADDR);
  influxdb_database = readStringFromEEPROM(INFLUXDB_DATABASE_ADDR);
  influxdb_user = readStringFromEEPROM(INFLUXDB_USER_ADDR);
  influxdb_password = readStringFromEEPROM(INFLUXDB_PASSWORD_ADDR);

  for (int i = 0; i < 4; i++) {
    sensorNames[i] = readStringFromEEPROM(SENSOR_NAMES_ADDR + (i * 50));
  }

  sensors.begin();
  sensorCount = sensors.getDeviceCount();
  if (sensorCount > 4) {
    sensorCount = 4;
  }
  for (int i = 0; i < sensorCount; i++) {
    if (sensors.getAddress(sensorAddresses[i], i)) {
      Serial.print("Found device ");
      Serial.print(i + 1);
      Serial.print(" with address: ");
      printAddress(sensorAddresses[i]);
      Serial.println();
    }
  }

  server.on("/", HTTP_GET, handleRoot);
  server.on("/data", HTTP_GET, handleData);
  server.on("/wifi", HTTP_GET, handleWifiConfig);
  server.on("/saveWifi", HTTP_POST, handleSaveWifi);
  server.on("/influxdb", HTTP_GET, handleInfluxDBConfig);
  server.on("/saveInfluxDB", HTTP_POST, handleSaveInfluxDB);
  server.on("/sensorNames", HTTP_GET, handleSensorNamesConfig);
  server.on("/saveSensorNames", HTTP_POST, handleSaveSensorNames);
  server.on("/system", HTTP_GET, handleSystem);
  server.on("/updateURL", HTTP_POST, handleUpdateURL);
  server.on("/updateUpload", HTTP_POST, handleUpdateUpload);
  server.on("/reboot", HTTP_GET, handleReboot);
  server.on("/performUpdate", HTTP_POST, handlePerformUpdate);  // Register the new endpoint
  server.on("/downloadEEPROM", HTTP_GET, handleDownloadEEPROM);  // Endpoint for downloading EEPROM
  server.on("/uploadEEPROM", HTTP_POST, handleUploadEEPROM);  // Endpoint for uploading EEPROM

  server.begin();
  Serial.println("HTTP server started");
}

void loop() {
  sensors.requestTemperatures();
  for (int i = 0; i < sensorCount; i++) {
    float tempC = sensors.getTempC(sensorAddresses[i]);
    float tempF = tempC * 9.0 / 5.0 + 32.0;
    sensorReadings[i] = tempF;
  }

  displayOLED();
  server.handleClient();
  delay(1000);
}

void displayOLED() {
  static String lastDisplay = "";
  String displayContent = ipAddress + "\n";
  for (int i = 0; i < 4; i++) {
    displayContent += String(i + 1) + ": " + String(sensorReadings[i], 2) + "°F\n";
  }
  if (lastDisplay != displayContent) {
    lastDisplay = displayContent;
    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_ncenB08_tr);
    u8g2.drawStr((128 - u8g2.getStrWidth("BeerBot")) / 2, 10, "BeerBot");
    u8g2.drawStr((128 - u8g2.getStrWidth(ipAddress.c_str())) / 2, 22, ipAddress.c_str());
    u8g2.drawStr(0, 34, (String(1) + ": " + String(sensorReadings[0], 2) + "°F").c_str());
    u8g2.drawStr(64, 34, (String(2) + ": " + String(sensorReadings[1], 2) + "°F").c_str());
    u8g2.drawStr(0, 46, (String(3) + ": " + String(sensorReadings[2], 2) + "°F").c_str());
    u8g2.drawStr(64, 46, (String(4) + ": " + String(sensorReadings[3], 2) + "°F").c_str());
    u8g2.sendBuffer();
  }
}

void handleRoot() {
  String html = getHtmlHeader();
  html += "<h1>BeerBot</h1>" + getMenu();
  html += "<div class='info'>IP Address: " + ipAddress + " | SSID: " + WiFi.SSID() + " | Signal Strength: " + getSignalStrength() + " | Number of Sensors: " + String(sensorCount) + "</div>";
  html += "<div class='blocks'>";
  for (int i = 0; i < sensorCount; i++) {
    html += "<div class='block'><h2 id='temp" + String(i + 1) + "'>Loading...</h2><div class='info'>" + sensorNames[i] + "</div></div>";
  }
  html += "</div>" + getFooter();
  html += "<script>function updateData() {fetch('/data').then(response => response.json()).then(data => {for (var i = 0; i < data.length; i++) {document.getElementById('temp' + (i + 1)).innerText = data[i] + '°F';}}).catch(error => console.error('Error fetching data:', error));}";
  html += "setInterval(updateData, 10000);</script></body></html>";
  server.sendHeader("Content-Type", "text/html; charset=UTF-8");
  server.send(200, "text/html", html);
}

void handleData() {
  String json = "[";
  for (int i = 0; i < sensorCount; i++) {
    json += String(sensorReadings[i], 2);
    if (i < sensorCount - 1) json += ", ";
  }
  json += "]";
  server.sendHeader("Content-Type", "application/json; charset=UTF-8");
  server.send(200, "application/json", json);
}

void handleWifiConfig() {
  String html = getHtmlHeader();
  html += "<h1>Wi-Fi Configuration</h1>" + getMenu();
  html += "<div class='center'><form action='/saveWifi' method='post'><div class='form-group'><label for='ssid'>SSID:</label><input type='text' id='ssid' name='ssid'></div>";
  html += "<div class='form-group'><label for='password'>Password:</label><input type='password' id='password' name='password'></div>";
  html += "<div class='form-group'><label for='ip'>Static IP Address (optional):</label><input type='text' id='ip' name='ip'></div>";
  html += "<div class='form-group'><label for='gateway'>Gateway:</label><input type='text' id='gateway' name='gateway'></div>";
  html += "<div class='form-group'><label for='subnet'>Subnet Mask:</label><input type='text' id='subnet' name='subnet'></div>";
  html += "<div class='form-group'><input type='submit' value='Save'></div></form></div>" + getFooter() + "</body></html>";
  server.sendHeader("Content-Type", "text/html; charset=UTF-8");
  server.send(200, "text/html", html);
}

void handleSaveWifi() {
  if (server.hasArg("ssid") && server.hasArg("password")) {
    String ssid = server.arg("ssid");
    String password = server.arg("password");
    if (server.hasArg("ip") && server.arg("ip") != "" && server.hasArg("gateway") && server.hasArg("subnet")) {
      IPAddress staticIP, gateway, subnet;
      staticIP.fromString(server.arg("ip"));
      gateway.fromString(server.arg("gateway"));
      subnet.fromString(server.arg("subnet"));
      WiFi.config(staticIP, gateway, subnet);
    }
    WiFi.begin(ssid.c_str(), password.c_str());
    if (WiFi.status() == WL_CONNECTED) {
      ipAddress = WiFi.localIP().toString();
      String html = getHtmlHeader();
      html += "<h1>Wi-Fi Configuration Saved</h1><p>Device is connected to " + ssid + "</p><p>IP Address: " + ipAddress + "</p><a href='/'>Go to Home</a>";
      html += getFooter() + "</body></html>";
      server.sendHeader("Content-Type", "text/html; charset=UTF-8");
      server.send(200, "text/html", html);
      restartCountdown();
    } else {
      String html = getHtmlHeader();
      html += "<h1>Wi-Fi Configuration Failed</h1><p>Could not connect to " + ssid + "</p><a href='/wifi'>Try Again</a>";
      html += getFooter() + "</body></html>";
      server.sendHeader("Content-Type", "text/html; charset=UTF-8");
      server.send(200, "text/html", html);
    }
  } else {
    String html = getHtmlHeader();
    html += "<h1>Bad Request</h1><p>SSID and Password are required</p><a href='/wifi'>Try Again</a>";
    html += getFooter() + "</body></html>";
    server.sendHeader("Content-Type", "text/html; charset=UTF-8");
    server.send(400, "text/html", html);
  }
}

void handleInfluxDBConfig() {
  String html = getHtmlHeader();
  html += "<h1>InfluxDB Configuration</h1>" + getMenu();
  html += "<div class='center'><form action='/saveInfluxDB' method='post'><div class='form-group'><label for='influxdb_server'>InfluxDB Server:</label><input type='text' id='influxdb_server' name='influxdb_server' value='" + influxdb_server + "'></div>";
  html += "<div class='form-group'><label for='influxdb_database'>InfluxDB Database:</label><input type='text' id='influxdb_database' name='influxdb_database' value='" + influxdb_database + "'></div>";
  html += "<div class='form-group'><label for='influxdb_user'>InfluxDB Username:</label><input type='text' id='influxdb_user' name='influxdb_user' value='" + influxdb_user + "'></div>";
  html += "<div class='form-group'><label for='influxdb_password'>InfluxDB Password:</label><input type='password' id='influxdb_password' name='influxdb_password' value='" + influxdb_password + "'></div>";
  html += "<div class='form-group'><input type='submit' value='Save'></div></form></div>" + getFooter() + "</body></html>";
  server.sendHeader("Content-Type", "text/html; charset=UTF-8");
  server.send(200, "text/html", html);
}

void handleSaveInfluxDB() {
  if (server.hasArg("influxdb_server") && server.hasArg("influxdb_database") && server.hasArg("influxdb_user") && server.hasArg("influxdb_password")) {
    influxdb_server = server.arg("influxdb_server");
    influxdb_database = server.arg("influxdb_database");
    influxdb_user = server.arg("influxdb_user");
    influxdb_password = server.arg("influxdb_password");
    writeStringToEEPROM(INFLUXDB_SERVER_ADDR, influxdb_server);
    writeStringToEEPROM(INFLUXDB_DATABASE_ADDR, influxdb_database);
    writeStringToEEPROM(INFLUXDB_USER_ADDR, influxdb_user);
    writeStringToEEPROM(INFLUXDB_PASSWORD_ADDR, influxdb_password);
    String html = getHtmlHeader();
    html += "<h1>InfluxDB Configuration Saved</h1><a href='/'>Go to Home</a>" + getFooter() + "</body></html>";
    server.sendHeader("Content-Type", "text/html; charset=UTF-8");
    server.send(200, "text/html", html);
    restartCountdown();
  } else {
    String html = getHtmlHeader();
    html += "<h1>Bad Request</h1><p>All fields are required</p><a href='/influxdb'>Try Again</a>" + getFooter() + "</body></html>";
    server.sendHeader("Content-Type", "text/html; charset=UTF-8");
    server.send(400, "text/html", html);
  }
}

void handleSensorNamesConfig() {
  String html = getHtmlHeader();
  html += "<h1>Sensor Names Configuration</h1>" + getMenu();
  html += "<div class='center'><form action='/saveSensorNames' method='post'>";
  for (int i = 0; i < 4; i++) {
    html += "<div class='form-group'><label for='sensor" + String(i + 1) + "'>Sensor " + String(i + 1) + " Name:</label><input type='text' id='sensor" + String(i + 1) + "' name='sensor" + String(i + 1) + "' value='" + sensorNames[i] + "'></div>";
  }
  html += "<div class='form-group'><input type='submit' value='Save'></div></form></div>" + getFooter() + "</body></html>";
  server.sendHeader("Content-Type", "text/html; charset=UTF-8");
  server.send(200, "text/html", html);
}

void handleSaveSensorNames() {
  for (int i = 0; i < 4; i++) {
    if (server.hasArg("sensor" + String(i + 1))) {
      sensorNames[i] = server.arg("sensor" + String(i + 1));
      writeStringToEEPROM(SENSOR_NAMES_ADDR + (i * 50), sensorNames[i]);
    }
  }
  String html = getHtmlHeader();
  html += "<h1>Sensor Names Saved</h1><a href='/'>Go to Home</a>" + getFooter() + "</body></html>";
  server.sendHeader("Content-Type", "text/html; charset=UTF-8");
  server.send(200, "text/html", html);
  restartCountdown();
}

void handleSystem() {
  String updateStatus = getUpdateStatus();
  String updateButton = "";
  
  if (updateStatus == "yes") {
    updateButton = "<form action='/performUpdate' method='post'><input type='submit' value='Update Now'></form>";
  } else if (updateStatus == "no") {
    updateButton = "<p>Up to Date</p>";
  } else {
    updateButton = "<p>Update Status Check Failed</p>";
  }

  String html = getHtmlHeader();
  html += "<h1>System</h1>" + getMenu();
  html += "<div class='center'><div class='info'><p>Sensor IDs:</p>";
  for (int i = 0; i < sensorCount; i++) {
    html += "<p>Sensor " + String(i + 1) + ": ";
    for (uint8_t j = 0; j < 8; j++) {
      if (sensorAddresses[i][j] < 16) html += "0";
      html += String(sensorAddresses[i][j], HEX);
    }
    html += "</p>";
  }
  html += "<p>ESP32 Chip ID: " + String((uint32_t)ESP.getEfuseMac(), HEX) + "</p>";
  html += "<p>WiFi MAC Address: " + WiFi.macAddress() + "</p>";
  html += "<p>RAM Usage: " + getRAMUsage() + "</p>";
  html += "<p>Space Used: " + getSpaceUsed() + "</p>";
  html += "<h2>Update Firmware</h2>";
  html += updateButton;
  html += "<h2>Manual Firmware Upload</h2>";
  html += "<form method='POST' action='/updateUpload' enctype='multipart/form-data'>";
  html += "<label for='update'>Select Firmware File:</label>";
  html += "<input type='file' id='update' name='update'>";
  html += "<input type='submit' value='Upload'>";
  html += "</form>";
  html += "<h2>EEPROM Management</h2>";
  html += "<a href='/downloadEEPROM'>Download EEPROM</a><br><br>";
  html += "<form method='POST' action='/uploadEEPROM' enctype='multipart/form-data'>";
  html += "<label for='eeprom'>Select EEPROM File:</label>";
  html += "<input type='file' id='eeprom' name='eeprom'>";
  html += "<input type='submit' value='Upload'>";
  html += "</form>";
  html += "<button onclick=\"if(confirm('Are you sure you want to reboot?')){location.href='/reboot';}\">Reboot</button>";
  html += "</div></div>" + getFooter() + "</body></html>";
  server.sendHeader("Content-Type", "text/html; charset=UTF-8");
  server.send(200, "text/html", html);
}

void handleUpdateURL() {
  if (server.hasArg("url")) {
    String firmwareURL = server.arg("url");
    HTTPClient http;
    http.begin(firmwareURL);
    int httpCode = http.GET();
    if (httpCode == HTTP_CODE_OK) {
      int contentLength = http.getSize();
      bool canBegin = Update.begin(contentLength);
      if (canBegin) {
        WiFiClient *client = http.getStreamPtr();
        size_t written = Update.writeStream(*client);
        if (written == contentLength) {
          if (Update.end()) {
            if (Update.isFinished()) {
              server.send(200, "text/plain", "Update Successful. Rebooting...");
              restartCountdown();
            } else {
              server.send(200, "text/plain", "Update Not Finished.");
            }
          } else {
            server.send(200, "text/plain", String("Update Failed: ") + Update.getError());
          }
        } else {
          server.send(200, "text/plain", "Update Failed: Written only " + String(written) + "/" + String(contentLength));
        }
      } else {
        server.send(200, "text/plain", "Update Failed: Not enough space.");
      }
    } else {
      server.send(200, "text/plain", "HTTP Error: " + String(httpCode));
    }
    http.end();
  } else {
    server.send(200, "text/plain", "URL Not Provided");
  }
}

void handleUpdateUpload() {
  HTTPUpload& upload = server.upload();
  if (upload.status == UPLOAD_FILE_START) {
    Serial.printf("Update: %s\n", upload.filename.c_str());
    if (!Update.begin(UPDATE_SIZE_UNKNOWN)) { // Start with max available size
      Update.printError(Serial);
    }
  } else if (upload.status == UPLOAD_FILE_WRITE) {
    if (Update.write(upload.buf, upload.currentSize) != upload.currentSize) {
      Update.printError(Serial);
    }
  } else if (upload.status == UPLOAD_FILE_END) {
    if (Update.end(true)) { // true to set the size to the current progress
      Serial.printf("Update Success: %u\nRebooting...\n", upload.totalSize);
      server.send(200, "text/plain", "Update successful. Rebooting...");
      delay(1000);
      ESP.restart();
    } else {
      Update.printError(Serial);
      server.send(500, "text/plain", "Update failed. See serial monitor for more details.");
    }
  } else {
    server.send(500, "text/plain", "File upload failed.");
  }
  yield();
}

void handlePerformUpdate() {
  HTTPClient http;
  http.begin("https://esupdate.kps-lv.com/update.bin");
  int httpCode = http.GET();
  if (httpCode == HTTP_CODE_OK) {
    int contentLength = http.getSize();
    bool canBegin = Update.begin(contentLength);
    if (canBegin) {
      WiFiClient *client = http.getStreamPtr();
      size_t written = Update.writeStream(*client);
      if (written == contentLength) {
        if (Update.end()) {
          if (Update.isFinished()) {
            server.send(200, "text/plain", "Update Successful. Rebooting...");
            restartCountdown();
          } else {
            server.send(200, "text/plain", "Update Not Finished.");
          }
        } else {
          server.send(200, "text/plain", String("Update Failed: ") + Update.getError());
        }
      } else {
        server.send(200, "text/plain", "Update Failed: Written only " + String(written) + "/" + String(contentLength));
      }
    } else {
      server.send(200, "text/plain", "Update Failed: Not enough space.");
    }
  } else {
    server.send(200, "text/plain", "HTTP Error: " + String(httpCode));
  }
  http.end();
}

void handleReboot() {
  u8g2.clearBuffer();
  u8g2.setFont(u8g2_font_ncenB08_tr);
  u8g2.drawStr(0, 24, "Rebooting...");
  u8g2.sendBuffer();
  
  String html = getHtmlHeader();
  html += "<h1>Rebooting...</h1>";
  html += "<script>setTimeout(function() { window.location.href = '/'; }, 5000);</script>";
  html += getFooter() + "</body></html>";
  server.sendHeader("Content-Type", "text/html; charset=UTF-8");
  server.send(200, "text/html", html);
  delay(1000);
  ESP.restart();
}

void handleDownloadEEPROM() {
  String eepromData;
  for (int i = 0; i < EEPROM_SIZE; i++) {
    eepromData += char(EEPROM.read(i));
  }
  server.sendHeader("Content-Type", "application/octet-stream");
  server.sendHeader("Content-Disposition", "attachment; filename=eeprom.bin");
  server.send(200, "application/octet-stream", eepromData);
}

void handleUploadEEPROM() {
  HTTPUpload& upload = server.upload();
  if (upload.status == UPLOAD_FILE_START) {
    Serial.printf("EEPROM Upload: %s\n", upload.filename.c_str());
  } else if (upload.status == UPLOAD_FILE_WRITE) {
    for (int i = 0; i < upload.currentSize; i++) {
      EEPROM.write(i, upload.buf[i]);
    }
    EEPROM.commit();
  } else if (upload.status == UPLOAD_FILE_END) {
    Serial.printf("EEPROM Upload Success: %u\n", upload.totalSize);
    server.send(200, "text/plain", "EEPROM Upload successful.");
  } else {
    server.send(500, "text/plain", "EEPROM upload failed.");
  }
  yield();
}

String getHtmlHeader() {
  String header = "<html><head><title>BeerBot</title><meta charset=\"UTF-8\">";
  header += "<style>body { font-family: Arial, sans-serif; background-color: #121212; color: #e0e0e0; margin: 0; padding: 0; }";
  header += "h1 { color: #ffffff; text-align: center; padding: 20px 0; }";
  header += ".info { text-align: center; padding: 10px 0; }";
  header += "a { color: #00aaff; text-decoration: none; }";
  header += ".blocks { display: flex; justify-content: center; align-items: center; }";
  header += ".block { background-color: #1e1e1e; border-radius: 10px; padding: 20px; margin: 10px; display: inline-block; }";
  header += ".footer { text-align: center; padding: 10px 0; color: #999999; }";
  header += ".menu { position: fixed; left: 0; top: 0; width: 200px; height: 100%; background-color: #333; padding-top: 60px; }";
  header += ".menu a { padding: 10px 15px; text-decoration: none; font-size: 25px; color: #818181; display: block; }";
  header += ".menu a:hover { color: #f1f1f1; }";
  header += ".center { display: flex; justify-content: center; align-items: center; flex-direction: column; }";
  header += ".form-group { margin-bottom: 15px; text-align: left; }";
  header += ".form-group label { display: block; margin-bottom: 5px; }";
  header += ".form-group input[type='text'], .form-group input[type='password'] { width: 100%; padding: 8px; box-sizing: border-box; }";
  header += ".form-group input[type='submit'] { padding: 10px 20px; background-color: #00aaff; color: #fff; border: none; border-radius: 5px; cursor: pointer; }";
  header += ".form-group input[type='submit']:hover { background-color: #0088cc; }</style></head><body>";
  return header;
}

String getMenu() {
  return "<div class='menu'><a href='/home'>Home</a><a href='/wifi'>WiFi</a><a href='/influxdb'>InfluxDB</a><a href='/sensorNames'>Sensor Names</a><a href='/system'>System</a></div>";
}

String getFooter() {
  return "<div class='footer'>Built by Kissler | Version 1.1.2</div>";
}

String getSignalStrength() {
  int rssi = WiFi.RSSI();
  if (rssi > -50) return "Excellent";
  if (rssi > -60) return "Good";
  if (rssi > -70) return "Fair";
  return "Weak";
}

void writeStringToEEPROM(int addrOffset, const String &strToWrite) {
  byte len = strToWrite.length();
  EEPROM.write(addrOffset, len);
  for (int i = 0; i < len; i++) {
    EEPROM.write(addrOffset + 1 + i, strToWrite[i]);
  }
  EEPROM.commit();
}

String readStringFromEEPROM(int addrOffset) {
  int len = EEPROM.read(addrOffset);
  char data[len + 1];
  for (int i = 0; i < len; i++) {
    data[i] = EEPROM.read(addrOffset + 1 + i);
  }
  data[len] = '\0';
  return String(data);
}

void printAddress(DeviceAddress deviceAddress) {
  for (uint8_t i = 0; i < 8; i++) {
    if (deviceAddress[i] < 16) Serial.print("0");
    Serial.print(deviceAddress[i], HEX);
  }
}

String getUpdateStatus() {
  HTTPClient http;
  http.begin("https://esupdate.kps-lv.com/update.txt");
  int httpCode = http.GET();
  if (httpCode == HTTP_CODE_OK) {
    String payload = http.getString();
    http.end();
    return payload;
  } else {
    http.end();
    return "error";
  }
}

String getRAMUsage() {
  return String(ESP.getFreeHeap()) + " / " + String(ESP.getHeapSize()) + " bytes";
}

String getSpaceUsed() {
  size_t totalBytes = ESP.getFlashChipSize();
  size_t usedBytes = totalBytes - ESP.getFreeSketchSpace();
  return String((usedBytes * 100) / totalBytes) + "%";
}

void restartCountdown() {
  for (int i = 5; i >= 0; i--) {
    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_ncenB08_tr);
    u8g2.drawStr(0, 24, "Restarting in:");
    u8g2.setCursor((128 - u8g2.getStrWidth(String(i).c_str())) / 2, 40);
    u8g2.print(i);
    u8g2.sendBuffer();
    delay(1000);
  }
  ESP.restart();
}
